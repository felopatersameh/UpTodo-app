import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../../core/model/task_model.dart';import '../../../../core/utils/Widget/build_task.dart';import '../../../Index/ViewModel/GetTask/get_task_cubit.dart';import '../../../../../core/utils/resource/styles.dart';class TaskRunningBySelected extends StatefulWidget {  const TaskRunningBySelected({    super.key,  });  @override  State<TaskRunningBySelected> createState() => _TaskRunningBySelectedState();}class _TaskRunningBySelectedState extends State<TaskRunningBySelected> {  @override  Widget build(BuildContext context) {    return BlocBuilder<GetTaskCubit, GetTaskState>(      builder: (context, state) {        return FutureBuilder<List<TaskModel>>(          future: Future.value(            context.read<GetTaskCubit>().selectTaskRunningBySelectedDateTime(),          ),          builder: (context, snapshot) {            if (snapshot.hasData && snapshot.data!.isNotEmpty) {              final tasks = snapshot.data!;              return ListView.builder(                  physics: BouncingScrollPhysics(),                  shrinkWrap: true,                  itemCount: tasks.length,                  itemBuilder: (context, index) {                    if (tasks.isEmpty) {                      return Center(child: Text("No task"));                    }                    return TaskBuilder(                      state: tasks[index],                    );                  });            } else if (snapshot.hasError) {              return Center(                child: Text(                  "Error loading tasks",                  style: Styles.text16(),                ),              );            }            return Container();          },        );      },    );  }}