import 'package:contained_tab_bar_view/contained_tab_bar_view.dart';import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../TaskManagement/ViewModel/AddTask/add_task_cubit.dart';import 'build_items_task_calender.dart';import '../../../../core/utils/resource/string.dart';import '../../../../core/utils/resource/colors.dart';import '../../../../core/utils/resource/styles.dart';class BuildButtonsSwitch extends StatefulWidget {  const BuildButtonsSwitch({super.key});  @override  State<BuildButtonsSwitch> createState() => _BuildButtonsSwitchState();}EdgeInsetsGeometry _marginTabBar =    const EdgeInsets.only(left: 25, right: 25, top: 20);double _heightTabBar = .09;double _widthTabBar = .9;Decoration _decorationContainer = BoxDecoration(  border: Border.all(width: 2, color: AppColors.gray2TextColor),);class _BuildButtonsSwitchState extends State<BuildButtonsSwitch> {  @override  Widget build(BuildContext context) {    return BlocBuilder<AddTaskCubit, AddTaskState>(      builder: (context, state) {        return Expanded(            child: ContainedTabBarView(          onChange: (p0) => context.read<AddTaskCubit>().switchButtons(),          tabBarViewProperties: const TabBarViewProperties(            physics: NeverScrollableScrollPhysics(),          ),          tabs: [            Container(              padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 48),              decoration: !context.read<AddTaskCubit>().isToday                  ? _decorationContainer                  : null,              child: const Text(AppStrings.todayTask),            ),            Container(              padding: const EdgeInsets.symmetric(vertical: 14, horizontal: 37),              decoration: context.read<AddTaskCubit>().isToday                  ? _decorationContainer                  : null,              child: const Text(AppStrings.completeTask),            ),          ],          tabBarProperties: TabBarProperties(            isScrollable: false,            margin: _marginTabBar,            width: MediaQuery.sizeOf(context).width * _widthTabBar,            height: MediaQuery.sizeOf(context).height * _heightTabBar,            background: Container(              decoration: const BoxDecoration(                color: AppColors.secondBackGroundColor,              ),            ),            position: TabBarPosition.top,            alignment: TabBarAlignment.center,            indicatorWeight: 0,            indicatorPadding:                const EdgeInsets.symmetric(vertical: 14, horizontal: 18),            indicator: const BoxDecoration(              shape: BoxShape.rectangle,              color: AppColors.primaryColor,            ),            labelStyle: Styles.text16(context),            unselectedLabelStyle: Styles.text16(context),            indicatorSize: TabBarIndicatorSize.tab,            indicatorColor: Colors.transparent,          ),          views: const [            BuildItemsTaskCalender(            ),            BuildItemsTaskCalender(            ),          ],        ));      },    );  }}