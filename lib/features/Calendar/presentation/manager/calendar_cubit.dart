import 'package:bloc/bloc.dart';import 'package:get_it/get_it.dart';import 'package:hive/hive.dart';import 'package:intl/intl.dart';import 'package:meta/meta.dart';import '../../../User/data/model/user_account_model.dart';import '../../data/models/task_model.dart';part 'calendar_state.dart';class CalendarCubit extends Cubit<CalendarState> {  CalendarCubit() : super(CalendarInitial());  bool isToday = true;  DateTime dateTime = DateTime.now();  List<TaskModel> taskModel = [];  void filterToday() {    emit(CalendarLoading());    final String dateTimeFormat = DateFormat("E M").format(dateTime);    final list = taskModel.where(      (element) {        return DateFormat("E M").format(element.dateTime) == dateTimeFormat;      },    ).toList();    emit(CalendarSucceed(list));  }  void filterCompleted() {    emit(CalendarLoading());    final String dateTimeFormat = DateFormat("E M").format(dateTime);    final list = taskModel.where(      (element) {        return DateFormat("E M").format(element.dateTime) == dateTimeFormat &&            element.isCompleted;      },    ).toList();    emit(CalendarSucceed(list));  }  void update(TaskModel update) {    final box = GetIt.I<Box<TaskModel>>();    final index = taskModel.indexOf(update);    box.putAt(index, update);  }  void filter() {    final box = GetIt.I<Box<TaskModel>>();    if (taskModel.isEmpty) {      if (box.isNotEmpty) {        taskModel.addAll(box.values);      }    }    if (isToday == true) {      filterToday();    } else {      filterCompleted();    }  }  void changeDate(DateTime currentDateTime) {    dateTime = currentDateTime;    filter();  }  Future<void> switchButtons() async {    isToday = !isToday;    filter();  }  void addTask(TaskModel model) {    final box = GetIt.I<Box<TaskModel>>();    taskModel.add(model);    box.add(model);    filter();  }}