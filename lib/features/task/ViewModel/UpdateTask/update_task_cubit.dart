import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:hive/hive.dart';import '../../../../core/Network/serves_locator.dart';import '../../../../core/model/task_model.dart';import '../../../Index/ViewModel/GetTask/get_task_cubit.dart';part 'update_task_state.dart';class UpdateTaskCubit extends Cubit<UpdateTaskState> {  UpdateTaskCubit() : super(UpdateTaskInitial());  TaskModel getTask(String id, BuildContext context) {    final cubit = context.read<GetTaskCubit>();    final taskModel =        cubit.taskModel.singleWhere((element) => element.id == id);    // emit(UpdateTasksSucceed(taskModel));    return taskModel;  }  void update(TaskModel update, BuildContext context) {    // print("object 1");    final box = getIt<Box<TaskModel>>();    final cubit = context.read<GetTaskCubit>();    final index = cubit.taskModel.indexWhere((task) => task.id == update.id);    cubit.taskModel[index] = update;    box.put(index, update);    // print("update :: ${update.title}");    getTask(update.id, context);    cubit.getAllTasks();    // emit(UpdateTasksSucceed(update));  }}