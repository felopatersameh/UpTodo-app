import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intl/intl.dart';import '../../../../core/utils/resource/colors.dart';import '../../../../core/utils/resource/icons.dart';import '../../../../core/utils/resource/styles.dart';import '../../../../core/model/task_model.dart';import '../../../TaskManagement/View/Widget/build_dialog_add_task.dart';import '../../../TaskManagement/ViewModel/AddTask/add_task_cubit.dart';class TaskScreen extends StatelessWidget {  final TaskModel model;  const TaskScreen({super.key, required this.model});  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: AppBar(        leading: Container(          margin: EdgeInsets.only(left: 24, top: 15),          color: AppColors.otherColorBackground,          child: IconButton(            padding: EdgeInsets.zero,            onPressed: () => Navigator.of(context).pop(),            icon: const Icon(              Icons.close,              color: Colors.white,            ),          ),        ),        actions: [          Container(            margin: EdgeInsets.only(right: 25, top: 15),            color: AppColors.otherColorBackground,            child: IconButton(              padding: EdgeInsets.zero,              onPressed: () {},              icon: const Icon(                Icons.repeat,                color: Colors.white,              ),              color: AppColors.otherColorBackground,            ),          ),        ],      ),      body: Padding(        padding: const EdgeInsets.symmetric(horizontal: 24),        child: Column(          children: [            ListTile(              leading: IconButton(                  onPressed: () {                    model.isCompleted = !model.isCompleted;                    context.read<AddTaskCubit>().filter();                  },                  icon: !model.isCompleted                      ? AppIcons.circle                      : AppIcons.checkCircle),              title: Text(                model.title,                style: Styles.text20AppBAr(),              ),              trailing: IconButton(                  onPressed: () {                    showDialog(                      barrierDismissible: false,                      context: context,                      builder: (context) => DialogAddTask(taskModel:model ,),                    );                  },                  icon: const Icon(                    Icons.edit,                    color: Colors.white,                  )),              subtitle: Row(                crossAxisAlignment: CrossAxisAlignment.start,                mainAxisAlignment: MainAxisAlignment.spaceBetween,                children: [                  Text(                    model.description,                    style: Styles.text16()                        .copyWith(color: AppColors.gray1TextColor),                  ),                ],              ),            ),            _buildDetails(              context,              value: DateFormat("E D").format(model.dateTime),              title: "Task Time :",              icons: Icons.timer,            ),            _buildDetails(              context,              iconsValue: Icon(                IconData(model.type.icon, fontFamily: "MaterialIcons"),                color: model.type.colorIcon,              ),              value: model.type.name,              title: "Task Category :",              icons: Icons.tag_rounded,            ),            _buildDetails(              context,              value: model.priority.number.toString(),              title: "Task Priority :",              icons: model.priority.flag,            ),            _buildDetails(              context,              value: "Add Sub - Task",              title: "Sub - Task",              icons: Icons.history_edu_rounded,            ),          ],        ),      ),    );  }  Padding _buildDetails(    BuildContext context, {    required String title,    required IconData icons,    Icon? iconsValue,    required String value,  }) {    return Padding(      padding: const EdgeInsets.symmetric(vertical: 15),      child: Row(        mainAxisAlignment: MainAxisAlignment.spaceBetween,        children: [          Row(            children: [              Icon(                icons,                color: AppColors.iconColor,              ),              const SizedBox(                width: 10,              ),              Text(                title,                style: Styles.text16(),              ),            ],          ),          Container(            padding: const EdgeInsets.all(10),            height: MediaQuery.sizeOf(context).height * .05,            color: AppColors.secondBackGroundColor,            child: Align(                child: Row(              children: [                if (iconsValue != null)                  Padding(                    padding: const EdgeInsets.only(right: 15),                    child: iconsValue,                  ),                Text(                  value,                  style: Styles.text12(),                ),              ],            )),          )        ],      ),    );  }}