import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intl/intl.dart';import 'package:uptodo/core/utils/resource/constant.dart';import '../../../../core/utils/resource/format.dart';import '../../../../core/model/task_model.dart';import '../../../../core/utils/resource/styles.dart';import '../../ViewModel/UpdateTask/update_task_cubit.dart';import '../Widget/build_app_bar_task_view.dart';import '../Widget/build_details_task_view.dart';import '../Widget/delete_task.dart';import '../Widget/task_name_and_description.dart';class TaskScreen extends StatelessWidget {  final String id;  const TaskScreen({super.key, required this.id});  @override  Widget build(BuildContext context) {    return BlocBuilder<UpdateTaskCubit, UpdateTaskState>(      builder: (context, state) {        return Scaffold(          appBar: buildAppBarTaskView(context, onTap: () {}),          body: CustomScrollView(            shrinkWrap: true,            physics: AppConstant.physics,            slivers: [              SliverToBoxAdapter(                child: FutureBuilder(                  future: Future.value(                      context.read<UpdateTaskCubit>().getTask(id, context)),                  builder: (context, snapshot) {                    if (snapshot.hasData && snapshot.data != null) {                      final model = snapshot.data!;                      return _buildBody(model: model);                    } else if (snapshot.hasError) {                      return Center(                        child: Text(                          "${snapshot.error}",                          style: Styles.text16(),                        ),                      );                    }                    return Container();                  },                ),              ),            ],          ),        );      },    );  }  Padding _buildBody({required TaskModel model}) {    return Padding(      padding: const EdgeInsets.only(top: 30, right: 24, left: 24),      child: Column(        children: [          TaskNameAndDescription(model: model),          BuildDetailsTaskView(            value: DateFormat(AppFormat.dateCompareTask).format(model.dateTime),            title: "Task Time :",            icons: Icons.timer,          ),          BuildDetailsTaskView(            iconsValue: Icon(              // CategoryHelper.getIconByName(model.type.name),              model.type.iconData,              color: model.type.colorIcon,            ),            value: model.type.name,            title: "Task Category :",            icons: Icons.tag_rounded,          ),          BuildDetailsTaskView(            value: model.priority.number.toString(),            title: "Task Priority :",            icons: model.priority.flag,          ),          BuildDetailsTaskView(            value: "Add Sub - Task",            title: "Sub - Task",            icons: Icons.history_edu_rounded,          ),          DeleteTask(id: id)        ],      ),    );  }}