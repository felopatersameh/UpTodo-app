import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import 'package:intl/intl.dart';import 'package:table_calendar/table_calendar.dart';import '../../ViewModel/CalendarPicker/calendar_picker_cubit.dart';import '../../../../core/utils/Widget/custom_row.dart';import '../../../../core/utils/resource/colors.dart';import '../../../../core/utils/resource/styles.dart';import '../../../../core/utils/resource/string.dart';import '../../../../core/utils/resource/icons.dart';class BuildCalendarPicker extends StatelessWidget {  final DateTime? dateTime;  const BuildCalendarPicker({super.key, this.dateTime});  @override  Widget build(BuildContext context) {    return AlertDialog(      contentPadding: EdgeInsets.zero,      content: SizedBox(        width: 326.w,        height: 326.h,        child: BlocProvider(          create: (_) => CalendarPickerCubit()..initializeFocusDate(dateTime),          child: const _BuildCustomCalendar(),        ),      ),    );  }}class _BuildCustomCalendar extends StatelessWidget {  const _BuildCustomCalendar();  @override  Widget build(BuildContext context) {    final now = DateTime.now();    final firstDayOfMonthORToday = DateTime(now.year, now.month, now.day);    final lastDayOfMonth = DateTime(now.year, now.month + 1, 0);    TextStyle defaultStyle12 = Styles.text12();    TextStyle defaultStyle10 = Styles.text10();    return Container(      color: AppColors.secondBackGroundColor,      child: Column(        children: [          BlocBuilder<CalendarPickerCubit, DateTime?>(            builder: (context, foucDate) {              return TableCalendar(                rowHeight: 32.h,                firstDay: firstDayOfMonthORToday,                lastDay: lastDayOfMonth,                focusedDay: foucDate ?? firstDayOfMonthORToday,                // selectedDayPredicate: (day) =>                //     day.isAtSameMomentAs(foucDate ?? firstDayOfMonthORToday),                onDaySelected: (selectedDay, focusedDay) {                  context                      .read<CalendarPickerCubit>()                      .changeSelectedDayDate(selectedDay);                },                currentDay: foucDate,                calendarStyle: CalendarStyle(                  todayTextStyle: defaultStyle12,                  disabledTextStyle:                      defaultStyle12.copyWith(color: AppColors.gray1TextColor),                  todayDecoration: _defaultDecoration.copyWith(                    color: AppColors.primaryColor,                  ),                  defaultDecoration: _defaultDecoration,                  weekendDecoration: _defaultDecoration,                  weekendTextStyle: defaultStyle10,                  defaultTextStyle: defaultStyle12,                  outsideTextStyle:                      defaultStyle12.copyWith(color: AppColors.gray1TextColor),                ),                calendarBuilders: CalendarBuilders(                  headerTitleBuilder: (context, day) => _customHeaderTitle(day),                ),                headerStyle: HeaderStyle(                  headerMargin:                      EdgeInsets.symmetric(horizontal: 14, vertical: 9).r,                  formatButtonVisible: false,                  titleCentered: true,                  decoration: BoxDecoration(                    border: BorderDirectional(                      bottom: BorderSide(                        width: 1,                        color: AppColors.gray2TextColor,                      ),                    ),                  ),                  leftChevronIcon: AppIcons.arrowBack,                  rightChevronIcon: AppIcons.arrowForward,                ),                daysOfWeekStyle: DaysOfWeekStyle(                  weekdayStyle: defaultStyle10,                  weekendStyle:                      defaultStyle10.copyWith(color: AppColors.redTextColor),                ),              );            },          ),          Expanded(            child: CustomRow(              name: AppStrings.chooseTime,              onTap: () {                final selectedDate =                    context.read<CalendarPickerCubit>().foucDate;                Navigator.pop(context, selectedDate);              },            ),          ),        ],      ),    );  }  Column _customHeaderTitle(DateTime day) {    return Column(      children: [        Text(          DateFormat.MMMM().format(day),          style: Styles.text14(),        ),        Text(          DateFormat.y().format(day),          style: Styles.text14().copyWith(color: AppColors.gray1TextColor),        ),      ],    );  }  BoxDecoration get _defaultDecoration => BoxDecoration(        color: AppColors.calenderItemBackGroundColor,        shape: BoxShape.rectangle,        borderRadius: BorderRadius.circular(6.r),      );}