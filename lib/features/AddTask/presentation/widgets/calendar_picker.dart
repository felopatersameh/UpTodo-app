import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../Calendar/presentation/manager/calendar_cubit.dart';import '../../../../core/utils/Widget/custom_row.dart';import '../../../../core/utils/resource/colors.dart';import '../../../../core/utils/resource/styles.dart';import 'package:intl/intl.dart';import 'package:table_calendar/table_calendar.dart';import '../../../../core/utils/resource/string.dart';import '../../../../core/utils/resource/icons.dart';class BuildCalendarPicker extends StatelessWidget {  const BuildCalendarPicker({    super.key,  });  @override  Widget build(BuildContext context) {    return AlertDialog(      contentPadding: EdgeInsets.all(0),      content: SizedBox(        width: MediaQuery.of(context).size.width * 0.8,        height: MediaQuery.of(context).size.height * 0.45,        child: _BuildCustomCalendar(),      ),    );  }}class _BuildCustomCalendar extends StatefulWidget {  const _BuildCustomCalendar();  @override  State<_BuildCustomCalendar> createState() => _BuildCustomCalendarState();}final now = DateTime.now();final firstDayOfMonth = DateTime(now.year, now.month, now.day);final lastDayOfMonth = DateTime(now.year, now.month + 1, 0);final TextStyle _defaultStyle12 = Styles.text12();final TextStyle _defaultStyle10 = Styles.text10();final TextStyle _defaultStyle14 = Styles.text14();final BoxDecoration _defaultDecoration = BoxDecoration(    color: AppColors.calenderItemBackGroundColor,    shape: BoxShape.rectangle,    borderRadius: BorderRadiusDirectional.circular(6));class _BuildCustomCalendarState extends State<_BuildCustomCalendar> {  @override  Widget build(BuildContext context) {    return Container(      color: AppColors.secondBackGroundColor,      child: Column(        children: [          TableCalendar(            rowHeight: MediaQuery.sizeOf(context).height * .05,            firstDay: firstDayOfMonth,            lastDay: lastDayOfMonth,            focusedDay:                context.read<CalendarCubit>().foucDate ?? firstDayOfMonth,            onDaySelected: (selectedDay, focusedDay) {              setState(() {                context.read<CalendarCubit>().foucDate = selectedDay;              });            },            currentDay:                context.read<CalendarCubit>().foucDate ?? firstDayOfMonth,            calendarStyle: CalendarStyle(              todayTextStyle: _defaultStyle12,              disabledTextStyle:                  _defaultStyle12.copyWith(color: AppColors.gray1TextColor),              todayDecoration:                  _defaultDecoration.copyWith(color: AppColors.primaryColor),              defaultDecoration: _defaultDecoration,              weekendDecoration: _defaultDecoration,              weekendTextStyle: _defaultStyle10,              defaultTextStyle: _defaultStyle12,              outsideTextStyle:                  _defaultStyle12.copyWith(color: AppColors.gray1TextColor),            ),            calendarBuilders: CalendarBuilders(              headerTitleBuilder: (context, day) => _customHeaderTitle(day),            ),            headerStyle: HeaderStyle(              headerMargin: EdgeInsets.symmetric(horizontal: 14, vertical: 9),              formatButtonVisible: false,              titleCentered: true,              decoration: BoxDecoration(                border: BorderDirectional(                  bottom: BorderSide(                    width: 1,                    color: AppColors.gray2TextColor,                  ),                ),              ),              leftChevronIcon: AppIcons.arrowBack,              rightChevronIcon: AppIcons.arrowForward,            ),            daysOfWeekStyle: DaysOfWeekStyle(              weekdayStyle: _defaultStyle10,              weekendStyle:                  _defaultStyle10.copyWith(color: AppColors.redTextColor),            ),          ),          Expanded(            child: CustomRow(              name: AppStrings.chooseTime,              onTap: () {                Navigator.pop(context, context.read<CalendarCubit>().foucDate);              },            ),          ),        ],      ),    );  }  Column _customHeaderTitle(DateTime day) {    return Column(      children: [        Text(          DateFormat.MMMM().format(day),          style: _defaultStyle14,        ),        Text(          DateFormat.y().format(day),          style: _defaultStyle10.copyWith(color: AppColors.gray1TextColor),        ),      ],    );  }}