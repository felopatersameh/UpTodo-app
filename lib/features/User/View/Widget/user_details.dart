import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../../core/utils/Widget/image_view.dart';import '../../../TaskManagement/ViewModel/TaskCubit/task_management_cubit.dart';import '../../../../core/utils/resource/colors.dart';import '../../../../core/utils/resource/styles.dart';import '../../Model/user_account_model.dart';import '../../ViewModel/user_cubit.dart';class UserDetails extends StatefulWidget {  const UserDetails({super.key});  @override  State<UserDetails> createState() => _UserDetailsState();}class _UserDetailsState extends State<UserDetails> {  UserAccountModel? user;  @override  void initState() {    user = context.read<UserCubit>().initUserScreen();    super.initState();  }  @override  Widget build(BuildContext context) {    return BlocBuilder<UserCubit, UserState>(      builder: (context, state) {        return Column(          children: [            InkWell(                onTap: () {                  Navigator.of(context).push(MaterialPageRoute(                    builder: (context) => ImageView(                      photo: user!.image,                    ),                  ));                },                child: CircleAvatar(                  maxRadius: MediaQuery.sizeOf(context).width * 0.11,                  backgroundColor: Colors.red,                  backgroundImage: state is ImagePickedSuccess                      ? FileImage(state.image)                      : user != null                          ? NetworkImage(user!.image)                          : null,                  child: state is ImagePickedSuccess || (user != null)                      ? null                      : Icon(Icons.person,                          size: MediaQuery.sizeOf(context).width * 0.11),                )),            SizedBox(              height: MediaQuery.sizeOf(context).height * .014,            ),            Text(              state is UserUpdated ? state.user.name : user!.name,              textAlign: TextAlign.center,              style: Styles.text20AppBar(context),            ),            SizedBox(              height: MediaQuery.sizeOf(context).height * .02,            ),            Row(              mainAxisAlignment: MainAxisAlignment.spaceAround,              children: [                Container(                  decoration: BoxDecoration(                    color: AppColors.secondBackGroundColor,                    borderRadius: BorderRadius.circular(7),                  ),                  width: MediaQuery.sizeOf(context).width * .4,                  height: MediaQuery.sizeOf(context).height * .09,                  child: Center(                    child: Text(                      "${context.watch<TaskManagementCubit>().taskModel.length} Task left",                      maxLines: 1,                      style: Styles.text16(context),                    ),                  ),                ),                Container(                  decoration: BoxDecoration(                    color: AppColors.secondBackGroundColor,                    borderRadius: BorderRadius.circular(7),                  ),                  width: MediaQuery.sizeOf(context).width * .4,                  height: MediaQuery.sizeOf(context).height * .09,                  child: Center(                    child: Text(                      "${context.watch<TaskManagementCubit>().doneTask} Task done",                      maxLines: 1,                      style: Styles.text16(context),                    ),                  ),                ),              ],            ),            const SizedBox(height: 20),          ],        );      },    );  }}