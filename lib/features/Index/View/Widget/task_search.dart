import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:flutter_screenutil/flutter_screenutil.dart';import '../../../../core/model/task_model.dart';import '../../../../core/utils/Widget/build_task.dart';import '../../../../core/utils/resource/colors.dart';import '../../../../core/utils/resource/styles.dart';import '../../ViewModel/GetTask/get_task_cubit.dart';class TaskSearch extends StatefulWidget {  const TaskSearch({super.key});  @override  State<TaskSearch> createState() => _TaskSearchState();}class _TaskSearchState extends State<TaskSearch> {  @override  void initState() {    super.initState();    fetchCompletedTasks();  }  Future<List<TaskModel>> fetchCompletedTasks() async {    final cubit = context.read<GetTaskCubit>();    return cubit.filteredTasks;  }  @override  Widget build(BuildContext context) {    return BlocBuilder<GetTaskCubit, GetTaskState>(      builder: (context, state) {        return FutureBuilder(          future: fetchCompletedTasks(),          builder: (context, snapshot) {            if (snapshot.hasData && snapshot.data!.isNotEmpty) {              final completedTasks = snapshot.data!;              return Column(                crossAxisAlignment: CrossAxisAlignment.start,                children: [                  Padding(                    padding: EdgeInsets.only(left: 24, top: 20).r,                    child: Container(                        decoration: BoxDecoration(                            color: AppColors.secondBackGroundColor,                            borderRadius:                                BorderRadiusDirectional.circular(5.r)),                        height: 31.h,                        width: 76.w,                        child: Center(                          child: Text(                            "Completed",                            style: Styles.text12(),                          ),                        )),                  ),                  ListView.builder(                      physics: BouncingScrollPhysics(),                      shrinkWrap: true,                      itemCount: completedTasks.length,                      itemBuilder: (context, index) {                        if (completedTasks.isEmpty) {                          return Center(child: Text("No task"));                        }                        return TaskBuilder(                          state: completedTasks[index],                        );                      }),                ],              );            }            else if (snapshot.hasError) {              return Center(                child: Text(                  "${snapshot.error}",                  style: Styles.text16(),                ),              );            }            return Container();          },        );      },    );  }}