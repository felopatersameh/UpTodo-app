import 'package:bloc/bloc.dart';import 'package:flutter/foundation.dart';import 'package:hive/hive.dart';import 'package:intl/intl.dart';import '../../../../core/model/task_model.dart';import '../../../../core/Network/serves_locator.dart';import '../../../../core/utils/resource/format.dart';part 'get_task_state.dart';class GetTaskCubit extends Cubit<GetTaskState> {  GetTaskCubit() : super(GetTaskInitial());  List<TaskModel> taskModel = [];  DateTime dateTime = DateTime.now();  DateTime selectedDateTime = DateTime.now();  int doneTask = 0;  // ----------------------------item used  List<TaskModel> selectTaskIsCompleted = [];  List<TaskModel> selectTaskIsRunning = [];  //--------------------------------------------------  int selected = 0;  void getAllTasks() {    final box = getIt<Box<TaskModel>>();    if (taskModel.isNotEmpty) {      taskModel = [];    }    taskModel.addAll(box.values);    doneTask = getCompletedTaskCount();    getIndexTaskRunningToday();    getIndexTaskCompletedToday();    emit(GetAllTasksSucceed());  }  List<TaskModel> getIndexTaskRunningToday() {    // taskIsRunning = [];    final String dateTimeFormat =        DateFormat(AppFormat.dateCompareTask).format(dateTime);    final listRunning = taskModel.where(      (element) {        // if (DateFormat(AppFormat.dateCompareTask).format(element.dateTime) ==        //         dateTimeFormat &&        //     element.isCompleted == false) {        //   // taskIsRunning.add(element);        // }        return DateFormat(AppFormat.dateCompareTask).format(element.dateTime) ==                dateTimeFormat &&            element.isCompleted == false;      },    ).toList();    // print("listRunning Length::: ${taskIsRunning.length}");    // print("listRunning::: ${listRunning[0]}");    // emit(GetTaskSuccessRunning(running: listRunning));    return listRunning;  }  List<TaskModel> getIndexTaskCompletedToday() {    final String dateTimeFormat =        DateFormat(AppFormat.dateCompareTask).format(dateTime);    final listCompleted = taskModel.where(      (element) {        if (DateFormat("E M").format(element.dateTime) == dateTimeFormat &&            element.isCompleted) {          // taskIsCompleted.add(element);          return true;        } else {          return false;        }      },    ).toList();    doneTask = getCompletedTaskCount();    return listCompleted;    // emit(GetTaskSuccessCompleted(completed: listCompleted));  }  //--------------------------------------------------  List<TaskModel> selectTaskCompletedBySelectedDateTime() {    final String dateTimeFormat =        DateFormat(AppFormat.dateCompareTask).format(selectedDateTime);    final listCompleted = taskModel.where(      (element) {        if (DateFormat("E M").format(element.dateTime) == dateTimeFormat &&            element.isCompleted) {          // taskIsCompleted.add(element);          return true;        } else {          return false;        }      },    ).toList();    doneTask = getCompletedTaskCount();    // print("listCompleted:: ${listCompleted.length}");    return listCompleted;    // emit(GetTaskSuccessCompleted(completed: listCompleted));  }  List<TaskModel> selectTaskRunningBySelectedDateTime() {    // taskIsRunning = [];    final String dateTimeFormat =        DateFormat(AppFormat.dateCompareTask).format(selectedDateTime);    final listRunning = taskModel.where(      (element) {        // if (DateFormat(AppFormat.dateCompareTask).format(element.dateTime) ==        //         dateTimeFormat &&        //     element.isCompleted == false) {        //   // taskIsRunning.add(element);        // }        return DateFormat(AppFormat.dateCompareTask).format(element.dateTime) ==                dateTimeFormat &&            element.isCompleted == false;      },    ).toList();    // print("listRunning Length::: ${taskIsRunning.length}");    // print("listRunning::: ${taskIsRunning[0]}");    // emit(GetTaskSuccessRunning(running: listRunning));    // print("listRunning:: ${listRunning.length}");    return listRunning;  }  void changeDate(DateTime currentDateTime) {    selectedDateTime = currentDateTime;    selectTaskCompletedBySelectedDateTime();    selectTaskRunningBySelectedDateTime();    emit(ChangeDate());  }  int getCompletedTaskCount() {    final completedTasks = taskModel.where((task) => task.isCompleted).toList();    return completedTasks.length;  }  void update(TaskModel update) {    final box = getIt<Box<TaskModel>>();    final index = taskModel.indexWhere((task) => task.id == update.id);    taskModel[index] = update;    box.put(index, update);  }}