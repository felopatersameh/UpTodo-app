import 'package:bloc/bloc.dart';import 'package:flutter/material.dart';import 'package:hive/hive.dart';import 'package:intl/intl.dart';import '../../../../core/utils/resource/format.dart';import '../../../../core/Network/serves_locator.dart';import '../../../../core/model/task_model.dart';part 'add_task_state.dart';class AddTaskCubit extends Cubit<AddTaskState> {  AddTaskCubit() : super(CalendarInitial());  bool isToday = true;  DateTime dateTime = DateTime.now();  DateTime? foucDate;  List<TaskModel> taskModel = [];  List<TaskModel> isCompleted = [];  List<TaskModel> isTodayTask = [];  int doneTask = 0;  int selected = 0;  void filterToday() {    emit(CalendarLoading());    isTodayTask = [];    final String dateTimeFormat =        DateFormat(AppFormat.dateCompareTask).format(dateTime);    final list = taskModel.where(      (element) {        if (element.isCompleted == false) {          isTodayTask.add(element);        }        return DateFormat(AppFormat.dateCompareTask).format(element.dateTime) ==            dateTimeFormat;      },    ).toList();    emit(CalendarSucceed(list));  }  void filterCompleted() {    emit(CalendarLoading());    final String dateTimeFormat =        DateFormat(AppFormat.dateCompareTask).format(dateTime);    final list = taskModel.where(      (element) {        if (DateFormat("E M").format(element.dateTime) == dateTimeFormat &&            element.isCompleted) {          isCompleted.add(element);          return true;        } else {          return false;        }      },    ).toList();    emit(CalendarSucceed(list));  }  void getTask(TaskModel task) {    final index = taskModel.indexWhere((task) => task.id == task.id);    final getTask = taskModel[index];    emit(CalendarSucceed([getTask]));  }  void update(TaskModel update) {    if (update.isInBox) {      update.save();    }    final index = taskModel.indexWhere((task) => task.id == update.id);    taskModel[index] = update;  }  void filter() {    final box = getIt<Box<TaskModel>>();    if (taskModel.isEmpty) {      if (box.isNotEmpty) {        taskModel.addAll(box.values);      }    }    doneTask = getCompletedTaskCount();    if (isToday == true) {      filterToday();    } else {      filterCompleted();    }  }  void changeDate(DateTime currentDateTime) {    dateTime = currentDateTime;    filter();  }  Future<void> switchButtons() async {    isToday = !isToday;    filter();  }  void addTask(TaskModel model) {    final box = getIt<Box<TaskModel>>();    taskModel.add(model);    box.add(model);    filter();  }  int getCompletedTaskCount() {    final completedTasks = taskModel.where((task) => task.isCompleted).toList();    return completedTasks.length;  }}