import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import 'package:intl/intl.dart';import 'package:table_calendar/table_calendar.dart';import '../../../../core/utils/Widget/build_custom_box.dart';import '../../../../core/utils/Widget/build_text_form_field.dart';import '../../../../core/utils/Widget/custom_build_dialog.dart';import '../../../../core/utils/Widget/number_page.dart';import '../../../../core/utils/resource/colors.dart';import '../../../../core/utils/resource/styles.dart';import '../../../Calendar/data/models/category_model.dart';import '../../../Calendar/data/models/priority_model.dart';import '../../../Calendar/data/models/task_model.dart';import '../../../Calendar/presentation/manager/calendar_cubit.dart';import '../../../Calendar/presentation/widgets/custom_messages.dart';class DialogAddTask extends StatefulWidget {  const DialogAddTask({super.key});  @override  State<DialogAddTask> createState() => _DialogAddTaskState();}final TextEditingController _title = TextEditingController();final TextEditingController _description = TextEditingController();final GlobalKey<FormState> _keyForm = GlobalKey<FormState>();DateTime? _data;CategoryModel? _categoryModel;PriorityModel? _priorityModel;class _DialogAddTaskState extends State<DialogAddTask> {  final FocusNode _titleFocusNode = FocusNode();  AlignmentGeometry alignment = Alignment.bottomCenter;  @override  void initState() {    _title.clear();    _description.clear();    _data = null;    _categoryModel = null;    _priorityModel = null;    _titleFocusNode.requestFocus();    super.initState();  }  @override  void dispose() {    _titleFocusNode.dispose();    super.dispose();  }  @override  Widget build(BuildContext context) {    return Dialog(      alignment: alignment,      insetPadding: EdgeInsets.zero,      child: SingleChildScrollView(          child: Form(        key: _keyForm,        autovalidateMode: AutovalidateMode.onUserInteraction,        child: Container(          color: AppColors.secondBackGroundColor,          height: MediaQuery.of(context).size.height * 0.35,          width: MediaQuery.of(context).size.width,          padding: const EdgeInsets.all(25.0),          child: Column(            mainAxisSize: MainAxisSize.max,            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Padding(                padding: const EdgeInsets.all(8.0),                child: Text(                  "Add Task",                  style: Styles.text20AppBAr(),                ),              ),              const SizedBox(height: 10),              BuildTextFormField(                title: _title,                hint: "Title",                focusNode: _titleFocusNode,              ),              const SizedBox(height: 18),              BuildTextFormField(                title: _description,                hint: "Description",              ),              const SizedBox(height: 20),              Expanded(                  child: Center(                      child: Row(                mainAxisAlignment: MainAxisAlignment.spaceBetween,                children: [                  Row(                    children: [                      IconButton(                        onPressed: () => _showCalendarPicker(context),                        icon: Icon(                          _data == null                              ? Icons.timer_outlined                              : Icons.timer_rounded,                          color: AppColors.iconColor,                        ),                      ),                      IconButton(                        onPressed: () => _buildCategory(context),                        icon: Icon(                            _categoryModel == null                                ? Icons.sell_outlined                                : Icons.sell_rounded,                            color: AppColors.iconColor),                      ),                      IconButton(                        onPressed: () => _buildPriority(context),                        icon: Icon(                            _priorityModel == null                                ? Icons.flag_outlined                                : Icons.flag_rounded,                            color: AppColors.iconColor),                      ),                    ],                  ),                  IconButton(                    onPressed: () => _onPressed(),                    icon: const Icon(                      Icons.send_outlined,                      color: AppColors.primaryColor,                    ),                  ),                ],              ))),            ],          ),        ),      )),    );  }  void _onPressed() {    if (_keyForm.currentState!.validate()) {      if (_data == null) {        showMessage(text: "the date is required", state: ToastStates.error);      } else if (_categoryModel == null) {        showMessage(text: "the category is required", state: ToastStates.error);      } else if (_priorityModel == null) {        showMessage(text: "the priority is required", state: ToastStates.error);      } else {        final task = TaskModel(          _title.text,          _data!,          _categoryModel!,          _priorityModel!,          _description.text,        );        context.read<CalendarCubit>().addTask(task);        showMessage(text: "Succeed", state: ToastStates.succeed);        Navigator.of(context).pop();      }    }  }  Future<void> _showCalendarPicker(BuildContext context) async {    alignment = Alignment.center;    await showDialog(      context: context,      builder: (context) => AlertDialog(        contentPadding: EdgeInsets.all(0),        content: SizedBox(          width: MediaQuery.of(context).size.width * 0.8,          height: MediaQuery.of(context).size.height * 0.45,          child: CalendarPage(),        ),      ),    ).then((date) async {      if (date != null) {        _data = date;        return _showTimePicker(context);      }    });  }  Future<void> _showTimePicker(BuildContext context) async {    await showDialog(      context: context,      builder: (context) => AlertDialog(        contentPadding: EdgeInsets.all(0),        content: SizedBox(          width: MediaQuery.of(context).size.width * 0.8,          height: MediaQuery.of(context).size.height * 0.33,          child: NumberPage(),        ),      ),    ).then((date) {      if (date != null) {        final hour = date[0];        final minute = date[1];        _data = _data!.copyWith(hour: hour, minute: minute);      }      print("all data:: $_data");      alignment = Alignment.bottomCenter;    });  }  Future<dynamic> _buildCategory(BuildContext context) {    alignment = Alignment.center;    return showAdaptiveDialog(      context: context,      builder: (context) => CustomBuildDialog(        itemBuilder: (context, index) => BuildCustomBox(          onTap: () {            _categoryModel = CategoryModel.defaultCategory[index];            Navigator.of(context).pop();          },          backGround: CategoryModel.defaultCategory[index].backGroundColor,          icon: Icon(            IconData(CategoryModel.defaultCategory[index].icon,                fontFamily: "MaterialIcons"),            size: MediaQuery.sizeOf(context).width * .08,            color: CategoryModel.defaultCategory[index].colorIcon,          ),          title: CategoryModel.defaultCategory[index].name,        ),        count: CategoryModel.defaultCategory.length,      ),    ).then((p0) {      alignment = Alignment.bottomCenter;    });  }  Future<dynamic> _buildPriority(BuildContext context) {    alignment = Alignment.center;    return showDialog(        context: context,        builder: (context) => CustomBuildDialog(              itemBuilder: (context, index) {                return BuildCustomBox(                  onTap: () {                    _priorityModel = PriorityModel(index + 1);                    Navigator.of(context).pop();                  },                  backGround: AppColors.backGroundColor,                  icon: Icon(                    Icons.flag_outlined,                    size: MediaQuery.sizeOf(context).width * .09,                    color: AppColors.iconColor,                  ),                  textIcon: (index + 1).toString(),                );              },              count: 10,              heightContainer: .5,            )).then((onValue) {      alignment = Alignment.bottomCenter;    });  }}//******************************************************class CalendarPage extends StatefulWidget {  const CalendarPage({super.key});  @override  State<CalendarPage> createState() => _CalendarPageState();}final now = DateTime.now();final firstDayOfMonth = DateTime(now.year, now.month, now.day);DateTime foucDay = firstDayOfMonth;final lastDayOfMonth = DateTime(now.year, now.month + 1, 0);class _CalendarPageState extends State<CalendarPage> {  @override  Widget build(BuildContext context) {    return Container(      color: AppColors.secondBackGroundColor,      child: Column(        children: [          TableCalendar(            rowHeight: MediaQuery.sizeOf(context).height * .05,            firstDay: firstDayOfMonth,            lastDay: lastDayOfMonth,            focusedDay: foucDay,            onDaySelected: (selectedDay, focusedDay) {              setState(() {                foucDay = selectedDay;              });            },            currentDay: foucDay,            calendarStyle: CalendarStyle(              todayTextStyle: Styles.text12(),              disabledTextStyle:                  Styles.text12().copyWith(color: AppColors.gray1TextColor),              todayDecoration: BoxDecoration(                color: AppColors.primaryColor,                shape: BoxShape.rectangle,                borderRadius: BorderRadiusDirectional.circular(6),              ),              defaultDecoration: BoxDecoration(                color: AppColors.calenderItemBackGroundColor,                shape: BoxShape.rectangle,                borderRadius: BorderRadiusDirectional.circular(6),              ),              weekendDecoration: BoxDecoration(                color: AppColors.calenderItemBackGroundColor,                shape: BoxShape.rectangle,                borderRadius: BorderRadiusDirectional.circular(6),              ),              weekendTextStyle: Styles.text10(),              defaultTextStyle: Styles.text12(),              outsideTextStyle:                  Styles.text12().copyWith(color: AppColors.gray1TextColor),            ),            calendarBuilders: CalendarBuilders(              headerTitleBuilder: (context, day) {                return Column(                  children: [                    Text(                      DateFormat.MMMM().format(day),                      style: Styles.text14(),                    ),                    Text(                      DateFormat.y().format(day),                      style: Styles.text10()                          .copyWith(color: AppColors.gray1TextColor),                    ),                  ],                );              },            ),            headerStyle: HeaderStyle(              headerMargin: EdgeInsets.symmetric(horizontal: 14, vertical: 9),              formatButtonVisible: false,              titleCentered: true,              decoration: BoxDecoration(                border: BorderDirectional(                  bottom: BorderSide(                    width: 1,                    color: AppColors.gray2TextColor,                  ),                ),              ),              leftChevronIcon: Icon(Icons.chevron_left, color: Colors.white),              rightChevronIcon: Icon(Icons.chevron_right, color: Colors.white),            ),            daysOfWeekStyle: DaysOfWeekStyle(              weekdayStyle: Styles.text10(),              weekendStyle: Styles.text10().copyWith(color: Colors.red),            ),          ),          Spacer(),          Row(            mainAxisAlignment: MainAxisAlignment.spaceEvenly,            children: [              TextButton(                style: ButtonStyle(                  shape: WidgetStatePropertyAll(                    ContinuousRectangleBorder(),                  ),                ),                onPressed: () {                  Navigator.pop(context);                },                child: Text(                  'Cancel',                  style:                      Styles.text16().copyWith(color: AppColors.primaryColor),                ),              ),              ElevatedButton(                style: ButtonStyle(                    shape: WidgetStatePropertyAll(ContinuousRectangleBorder()),                    backgroundColor:                        WidgetStatePropertyAll(AppColors.primaryColor)),                onPressed: () {                  Navigator.pop(context, foucDay);                },                child: Text(                  'Choose Time',                  style: Styles.text16(),                ),              ),            ],          ),          SizedBox(height: 20),        ],      ),    );  }}