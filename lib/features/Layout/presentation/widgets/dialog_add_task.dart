import 'package:flutter/material.dart';import 'package:flutter_bloc/flutter_bloc.dart';import '../../../../core/utils/Widget/build_custom_box.dart';import '../../../../core/utils/Widget/build_text_form_field.dart';import '../../../../core/utils/Widget/custom_build_dialog.dart';import '../../../../core/utils/resource/colors.dart';import '../../../../core/utils/resource/styles.dart';import '../../../Calendar/data/models/category_model.dart';import '../../../Calendar/data/models/priority_model.dart';import '../../../Calendar/data/models/task_model.dart';import '../../../Calendar/presentation/manager/calendar_cubit.dart';import '../../../Calendar/presentation/widgets/custom_messages.dart';class DialogAddTask extends StatefulWidget {  const DialogAddTask({super.key});  @override  State<DialogAddTask> createState() => _DialogAddTaskState();}final TextEditingController _title = TextEditingController();final TextEditingController _description = TextEditingController();final GlobalKey<FormState> _keyForm = GlobalKey<FormState>();DateTime? _data;CategoryModel? _categoryModel;PriorityModel? _priorityModel;class _DialogAddTaskState extends State<DialogAddTask> {  @override  void initState() {    _title.clear();    _description.clear();    _data = null;    _categoryModel = null;    _priorityModel = null;    super.initState();  }  @override  Widget build(BuildContext context) {    return Dialog(      insetPadding: const EdgeInsets.all(0),      child: Form(        key: _keyForm,        autovalidateMode: AutovalidateMode.onUserInteraction,        child: Container(          color: AppColors.secondBackGroundColor,          height: MediaQuery.of(context).size.height * 0.35,          width: MediaQuery.of(context).size.width,          padding: const EdgeInsets.all(10.0),          child: Column(            mainAxisSize: MainAxisSize.max,            crossAxisAlignment: CrossAxisAlignment.start,            children: [              Padding(                padding: const EdgeInsets.all(8.0),                child: Text(                  "Add Task",                  style: Styles.text20AppBAr(),                ),              ),              const SizedBox(height: 10),              BuildTextFormField(                title: _title,                hint: "Title",              ),              const SizedBox(height: 18),              BuildTextFormField(                title: _description,                hint: "Description",              ),              Expanded(                  child: Center(                      child: Row(                mainAxisAlignment: MainAxisAlignment.spaceBetween,                children: [                  Row(                    children: [                      IconButton(                        onPressed: () => _buildDatePicker(context),                        icon: const Icon(                          Icons.timer_outlined,                          color: AppColors.iconColor,                        ),                      ),                      IconButton(                        onPressed: () => _buildCategory(context),                        icon: const Icon(Icons.sell_outlined,                            color: AppColors.iconColor),                      ),                      IconButton(                        onPressed: () => _buildPriority(context),                        icon: const Icon(Icons.flag_outlined,                            color: AppColors.iconColor),                      ),                    ],                  ),                  IconButton(                    onPressed: () => _onPressed(),                    icon: const Icon(                      Icons.send_rounded,                      color: AppColors.primaryColor,                    ),                  ),                ],              ))),            ],          ),        ),      ),    );  }  void _onPressed() {    if (_keyForm.currentState!.validate()) {      if (_data == null) {        showMessage(text: "the date is required", state: ToastStates.error);      } else if (_categoryModel == null) {        showMessage(text: "the category is required", state: ToastStates.error);      } else if (_priorityModel == null) {        showMessage(text: "the priority is required", state: ToastStates.error);      } else {        final task = TaskModel(          _title.text,          _data!,          _categoryModel!,          _priorityModel!,          _description.text,        );        context.read<CalendarCubit>().addTask(task);        showMessage(text: "Succeed", state: ToastStates.succeed);        Navigator.of(context).pop();      }    }  }  Future<void> _buildDatePicker(context) {    DateTime now = DateTime.now();    DateTime firstDayOfMonth = DateTime(now.year, now.month, now.day);    DateTime lastDayOfMonth = DateTime(now.year, now.month + 1, 0);    return showDatePicker(      context: context,      firstDate: firstDayOfMonth,      lastDate: lastDayOfMonth,      // initialDate: firstDayOfMonth,      builder: (context, child) {        return Theme(data: ThemeData.dark(), child: child!);      },      initialEntryMode: DatePickerEntryMode.calendarOnly,    ).then((value) {      _data = value!;    });  }  Future<dynamic> _buildCategory(BuildContext context) {    return showDialog(        context: context,        builder: (context) => CustomBuildDialog(              itemBuilder: (context, index) => BuildCustomBox(                onTap: () {                  _categoryModel = CategoryModel.defaultCategory[index];                  Navigator.of(context).pop();                },                backGround:                    CategoryModel.defaultCategory[index].backGroundColor,                icon: Icon(                  CategoryModel.defaultCategory[index].icon,                  size: MediaQuery.sizeOf(context).width * .08,                  color: CategoryModel.defaultCategory[index].colorIcon,                ),                title: CategoryModel.defaultCategory[index].name,              ),              count: CategoryModel.defaultCategory.length,            ));  }  Future<dynamic> _buildPriority(BuildContext context) {    return showDialog(        context: context,        builder: (context) => CustomBuildDialog(              itemBuilder: (context, index) {                return BuildCustomBox(                  onTap: () {                    _priorityModel = PriorityModel(index + 1);                    Navigator.of(context).pop();                  },                  backGround: AppColors.backGroundColor,                  icon: Icon(                    Icons.flag_outlined,                    size: MediaQuery.sizeOf(context).width * .09,                    color: AppColors.iconColor,                  ),                  textIcon: (index + 1).toString(),                );              },              count: 10,              heightContainer: .5,            ));  }}