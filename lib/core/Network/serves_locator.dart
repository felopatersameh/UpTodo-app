import 'package:get_it/get_it.dart';import 'package:hive_flutter/hive_flutter.dart';import '../../features/User/ViewModel/user_cubit.dart';import '../../features/AddTask/ViewModel/AddTask/add_task_cubit.dart';import '../../features/AddTask/model/category_model.dart';import '../../features/AddTask/model/priority_model.dart';import '../../features/Index/ViewModel/GetTask/get_task_cubit.dart';import '../../features/task/ViewModel/UpdateTask/update_task_cubit.dart';import '../model/task_model.dart';import '../../features/User/Model/user_account_model.dart';final getIt = GetIt.instance;Future<void> setupService() async {  await Hive.initFlutter();  // Register the adapters  Hive.registerAdapter(UserAccountModelAdapter());  Hive.registerAdapter(TaskModelAdapter());  Hive.registerAdapter(CategoryModelAdapter());  Hive.registerAdapter(PriorityModelAdapter());  // Open the boxes and register them with GetIt  final userAccountBox = await Hive.openBox<UserAccountModel>('userAccountBox');  getIt.registerSingleton<Box<UserAccountModel>>(userAccountBox);  final taskBox = await Hive.openBox<TaskModel>('taskBox');  getIt.registerSingleton<Box<TaskModel>>(taskBox);  final categoryBox = await Hive.openBox<CategoryModel>('categoryBox');  getIt.registerSingleton<Box<CategoryModel>>(categoryBox);  final priorityBox = await Hive.openBox<PriorityModel>('priorityBox');  getIt.registerSingleton<Box<PriorityModel>>(priorityBox);  // Cubit  getIt.registerSingleton<GetTaskCubit>(GetTaskCubit()..getAllTasks());  getIt.registerSingleton<UserCubit>(UserCubit());  getIt.registerSingleton<AddTaskCubit>(AddTaskCubit());  getIt.registerSingleton<UpdateTaskCubit>(UpdateTaskCubit());  // *---  await deleteLastMonthTasks();}Future<void> deleteLastMonthTasks() async {  final now = DateTime.now();  final lastMonth = DateTime(now.year, now.month - 1);  final taskBox = getIt<Box<TaskModel>>();  final keysToDelete = <dynamic>[];  for (var entry in taskBox.toMap().entries) {    final task = entry.value;    final key = entry.key;    if (task.dateTime.isBefore(lastMonth)) {      keysToDelete.add(key);    }  }  await taskBox.deleteAll(keysToDelete);}